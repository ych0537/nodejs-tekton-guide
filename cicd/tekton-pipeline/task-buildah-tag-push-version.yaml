apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    tekton.dev/displayName: pull,tag and push
    tekton.dev/pipelines.minVersion: "0.19"
    tekton.dev/tags: workspace
  labels:
    app.kubernetes.io/version: "0.12"
  name: buildah-tag-push-version-af
spec:
  description: Pull image from image-repository, tag-push image to repository. Git-repo
    must exist on workspace.
  params:
  - default: vfs
    description: Set buildah storage driver
    name: STORAGE_DRIVER
    type: string
  - default: ./Dockerfile
    description: Path to the Dockerfile to build.
    name: DOCKERFILE
    type: string
  - default: .
    description: Path to the directory to use as context.
    name: CONTEXT
    type: string
  - default: "true"
    description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS
      registry)
    name: TLSVERIFY
    type: string
  - description: Location of the image
    name: IMAGE_NAME
    type: string
  - description: Location of the repo where image has to be pushed
    name: IMAGE_REGISTRY
    type: string
  - default: registry.redhat.io/rhel8/buildah@sha256:e19cf23d5f1e0608f5a897f0a50448beb9f8387031cca49c7487ec71bd91c4d3
    description: The location of the buildah builder image.
    name: BUILDER_IMAGE
    type: string
  - default: registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:af7dd5b3b1598a980f17d5f5d3d8a4b11ab4f5184677f7f17ad302baa36bd3c1
    description: Image with git
    name: gitInitImage
    type: string
  results:
  - description: Digest of the image just built.
    name: IMAGE_DIGEST
  - description: Image tag
    name: tag
  - description: Message
    name: message
  steps:
  - image: $(params.gitInitImage)
    name: generate-tag
    script: |
      #!/usr/bin/env sh

      ts=$(date "+%Y%m%d-%H%M%S")
      short=$(git log -n 1 --pretty=format:'%h' | tr -d '\n')

      date_file="$(workspaces.source.path)/release/date"
      version_file="$(workspaces.source.path)/release/version"

      if [ -f "$date_file" ]; then
        date=$(cat $(workspaces.source.path)/release/date)
      else
       date="n/a"
      fi

      if [ -f "$version_file" ]; then
        version=$(cat $(workspaces.source.path)/release/version)
      fi

      if [ $version != '' ]; then
        tag="${version}_${ts}_${short}"
        if [ $date != 'n/a' ]; then
         tag="${version}_${date}_${short}"
        fi
      else
        tag="${ts}_${short}"
        echo "File version_file do not exist, using date and timestamp. ($tag)"

      fi

      echo -n $tag | tee $(results.tag.path)
      echo -n $tag > $(workspaces.source.path)/release/latest.tag
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
    workingDir: $(workspaces.source.path)
  - image: $(params.BUILDER_IMAGE)
    name: build-image
    script: |
      #!/usr/bin/env sh
      tag=$(cat $(results.tag.path))
      printf "Build image: %s\n" "buildah bud --storage-driver=vfs --tls-verify=$(params.TLSVERIFY) --layers -f $(params.DOCKERFILE) -t $(params.IMAGE_NAME):$tag ."
      buildah bud --storage-driver=vfs --tls-verify=$(params.TLSVERIFY) --layers -f $(params.DOCKERFILE) -t $(params.IMAGE_NAME):$tag .
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
    workingDir: $(workspaces.source.path)
  - image: $(params.BUILDER_IMAGE)
    name: push-tag
    script: |
      #!/usr/bin/env sh
      tag=$(cat $(results.tag.path))
      printf "Push image: %s\n" "buildah push --storage-driver=vfs --tls-verify=$(params.TLSVERIFY) --digestfile=$(workspaces.source.path)/image-digest $(params.IMAGE_NAME):$tag docker://$(params.IMAGE_REGISTRY):$tag"
      buildah push --storage-driver=vfs --tls-verify=$(params.TLSVERIFY) --digestfile=$(workspaces.source.path)/image-digest $(params.IMAGE_NAME):$tag docker://$(params.IMAGE_REGISTRY):$tag
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
    workingDir: $(workspaces.source.path)
  - image: $(params.BUILDER_IMAGE)
    name: digest-to-results
    script: cat $(workspaces.source.path)/image-digest | tee $(results.IMAGE_DIGEST.path)
      && cp -v $(workspaces.source.path)/image-digest $(workspaces.source.path)/release/image-digest
  volumes:
  - name: varlibcontainers
  - name: gen-source
  - name: envparams
  workspaces:
  - mountPath: /workspace/source
    name: source
