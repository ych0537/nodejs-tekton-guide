apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    tekton.dev/displayName: eap73-af
    tekton.dev/pipelines.minVersion: "0.19"
    tekton.dev/tags: s2i, java, workspace
  labels:
    app.kubernetes.io/version: "0.2"
  name: buildah-eap7x-af
spec:
  description: s2i-java task clones a Git repository and builds and pushes a container
    image using S2I and a AF eap73-af image
  params:
  - default: nexus.arbetsformedlingen.se/app-af-nexus-example/eap74-openjdk8-af:7.4.6-5_20220803_b6ae064
    description: The baseimage for eap73-af
    name: BASEIMAGE
    type: string
  - default: "true"
    description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS
      registry)
    name: TLSVERIFY
    type: string
  - description: Location of the repo where image has to be pushed
    name: IMAGE
    type: string
  - default: "true"
    name: IMAGE_LATEST_FLAG
    type: string
  - default: "true"
    name: IMAGE_RELEASE_FLAG
    type: string
  - default: registry.redhat.io/rhel8/buildah@sha256:e19cf23d5f1e0608f5a897f0a50448beb9f8387031cca49c7487ec71bd91c4d3
    description: The location of the buildah builder image.
    name: BUILDER_IMAGE
    type: string
  - default: target
    description: Location of the artifact(s)
    name: TARGET
    type: string
  - default: war,ear,jar
    description: Artifacts with given extensions to deploy
    name: EXTENSIONS
    type: string
  - default: configuration/cli
    description: Location of cli scripts
    name: CLI
    type: string
  - description: Image with git
    name: gitInitImage
    type: string
  results:
  - description: Digest of the image just built.
    name: IMAGE_DIGEST
  - description: Image tag
    name: tag
  steps:
  - env:
    - name: HOME
      value: /tekton/home
    image: registry.redhat.io/ocp-tools-4-tech-preview/source-to-image-rhel8@sha256:637c15600359cb45bc01445b5e811b6240ca239f0ebfe406b50146e34f68f631
    name: generate
    script: "#!/usr/bin/env sh\n\nDOCKERFILE=Dockerfile.gen\nSCRIPT1=/tmp/update-dockerfile.sh\nSCRIPT2=/tmp/update-dockerfile2.sh\n\necho
      \"Generate $DOCKERFILE\"\n\ncat <<EOF > $SCRIPT1\n#!/usr/bin/env sh\n\nartifacts=\\$(ls
      $(params.TARGET)/*.{$(params.EXTENSIONS)} | tr -d '\\n')\nfor a in \\$artifacts;
      do\n  d=\\$(basename \\$a)\n  echo \"ADD \\$a /deployments/\\$d\"\ndone\n\nEOF\nadd=$(sh
      $SCRIPT1)\n\ncat <<EOF > $SCRIPT2\n#!/usr/bin/env sh     \n\ncli=\\$(ls $(params.CLI)/*.cli
      2>/dev/null)\nif [ \"\\$?\" = \"0\" ]; then\n  for c in \\$cli; do\n    printf
      \"%s\\n\" \"ADD \\${c} /opt/eap/standalone/configuration/cli/\"\n  done\nfi\nEOF\nclis=$(sh
      $SCRIPT2)\n\ncat <<EOF > $DOCKERFILE\nFROM $(params.BASEIMAGE)\nUSER root\n\n$add\n$clis\n\nUSER
      1001\nEOF\ncat $DOCKERFILE\n"
    volumeMounts:
    - mountPath: /env-params
      name: envparams
    workingDir: $(workspaces.source.path)
  - command:
    - buildah
    - bud
    - --storage-driver=vfs
    - --tls-verify=$(params.TLSVERIFY)
    - --layers
    - -f
    - Dockerfile.gen
    - -t
    - $(params.IMAGE)
    - .
    image: $(params.BUILDER_IMAGE)
    name: build
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
    workingDir: $(workspaces.source.path)
  - image: $(params.gitInitImage)
    name: generate-tag
    script: |
      #!/usr/bin/env sh

      ts=$(date "+%Y%m%d-%H%M%S")
      short=$(git log -n 1 --pretty=format:'%h' | tr -d '\n')

      version_file="$(workspaces.source.path)/release/version"

      if [ -f "$version_file" ]; then
       version=$(cat $(workspaces.source.path)/release/version)
      fi

      if [ $version != '' ]; then
       tag="${version}_${ts}_${short}"
      else
       tag="${ts}_${short}"
       echo "File $version_file do not exist, using date and timestamp. ($tag)"

      fi

      echo -n $tag | tee $(results.tag.path)
      echo -n $tag > $(workspaces.source.path)/release/latest.tag
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
    workingDir: $(workspaces.source.path)
  - image: $(params.BUILDER_IMAGE)
    name: tag
    script: |
      #!/usr/bin/env sh

      tag=$(cat $(results.tag.path))
      printf "Tagging image: %s\n" "buildah tag --storage-driver=vfs $(params.IMAGE):latest $(params.IMAGE):${tag}"
      buildah tag --storage-driver=vfs $(params.IMAGE):latest $(params.IMAGE):${tag}
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
    workingDir: $(workspaces.source.path)
  - image: $(params.BUILDER_IMAGE)
    name: push
    script: |
      #!/usr/bin/env sh

      tag=$(cat $(results.tag.path))
      if [ $(params.IMAGE_RELEASE_FLAG) == "true" ]; then printf "Push image: %s\n" "buildah push --storage-driver=vfs --tls-verify=$(params.TLSVERIFY) --digestfile=$(workspaces.source.path)/image-digest $(params.IMAGE):$tag docker://$(params.IMAGE):$tag"

       buildah push --storage-driver=vfs --tls-verify=$(params.TLSVERIFY) --digestfile=$(workspaces.source.path)/image-digest $(params.IMAGE):$tag docker://$(params.IMAGE):$tag
      fi
      if [ $(params.IMAGE_LATEST_FLAG) == "true" ]; then printf "Push image: %s\n" "buildah push --storage-driver=vfs --tls-verify=$(params.TLSVERIFY) --digestfile=$(workspaces.source.path)/image-digest $(params.IMAGE):$tag docker://$(params.IMAGE):latest"

       buildah push --storage-driver=vfs --tls-verify=$(params.TLSVERIFY) --digestfile=$(workspaces.source.path)/image-digest $(params.IMAGE):$tag docker://$(params.IMAGE):latest
      fi
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
    workingDir: $(workspaces.source.path)
  - image: $(params.BUILDER_IMAGE)
    name: digest-to-results
    script: cat $(workspaces.source.path)/image-digest | tee $(results.IMAGE_DIGEST.path)
      && cp -v $(workspaces.source.path)/image-digest $(workspaces.source.path)/release/image-digest
  volumes:
  - name: varlibcontainers
  - name: gen-source
  - name: envparams
  workspaces:
  - mountPath: /workspace/source
    name: source
  - name: maven-repo
    optional: true
  - name: image-storage
    optional: true
